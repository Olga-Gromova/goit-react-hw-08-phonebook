{"version":3,"file":"static/js/649.08e65984.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.js","pages/Registration/Registration.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { signUp } from 'redux/auth/operations';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n  Icon,\n} from '@chakra-ui/react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { Navigate } from 'react-router-dom';\nimport { RiEyeLine, RiEyeOffLine } from 'react-icons/ri';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\n\nconst schema = yup\n  .object({\n    name: yup.string().min(3).max(20).required(),\n    email: yup.string().min(8).max(30).required(),\n    password: yup.string().min(6).max(30).required(),\n  })\n  .required();\n\nexport const RegistrationForm = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const isLogedIn = useSelector(selectIsLoggedIn);\n\n  const [toggleInput, setToggleInput] = useState('password');\n  const [toggleIcon, setToggleIcon] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const registerSubmit = data => {\n    dispatch(signUp(data))\n      .unwrap()\n      .catch(error => {\n        console.log(error);\n        toast({\n          position: 'top',\n          render: () => (\n            <Box\n              color=\"white\"\n              p={3}\n              bg=\"#e84a5f\"\n              borderRadius=\"10px\"\n              textAlign=\"center\"\n            >\n              Please, check again - some details are wrong\n            </Box>\n          ),\n        });\n      });\n  };\n\n  const toast = useToast();\n\n  const toggleClick = (toggle, setInput, setIcon) => {\n    if (toggle === 'password') {\n      setIcon(true);\n      return setInput('text');\n    }\n    if (toggle === 'text') {\n      setIcon(false);\n      return setInput('password');\n    }\n  };\n\n  return (\n    <>\n      {isLogedIn && <Navigate to=\"/contacts\" replace />}\n      <Box\n        as=\"form\"\n        minWidth={200}\n        mx=\"auto\"\n        onSubmit={handleSubmit(registerSubmit)}\n        textAlign=\"center\"\n      >\n        <FormControl isRequired mb=\"16px\">\n          <FormLabel>Username</FormLabel>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"User name\"\n            borderColor=\"#89d3da\"\n            borderWidth=\"1px\"\n            bg=\"#fff\"\n            autoComplete=\"name\"\n            {...register('name', { required: true })}\n          />\n          <span>{errors.name?.message}</span>\n        </FormControl>\n        <FormControl isRequired mb=\"16px\">\n          <FormLabel>Email</FormLabel>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            borderColor=\"#89d3da\"\n            borderWidth=\"1px\"\n            bg=\"#fff\"\n            autoComplete=\"email\"\n            placeholder=\"user@mail.com\"\n            {...register('email', { required: true })}\n          />\n          <span>{errors.email?.message}</span>\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel>Password</FormLabel>\n          <Input\n            // type=\"password\"\n            type={toggleInput}\n            {...register('password', { required: true })}\n            name=\"password\"\n            borderColor=\"#89d3da\"\n            borderWidth=\"1px\"\n            bg=\"#fff\"\n            autoComplete=\"new-password\"\n            placeholder=\"Your password\"\n          />\n          <Button\n            bg=\"transparent\"\n            position=\"absolute\"\n            right=\"0px\"\n            onClick={() =>\n              toggleClick(toggleInput, setToggleInput, setToggleIcon)\n            }\n          >\n            {toggleIcon ? (\n              <Icon as={RiEyeOffLine} w={8} h={8} />\n            ) : (\n              <Icon as={RiEyeLine} w={8} h={8} />\n            )}\n          </Button>\n\n          <span>{errors.password?.message}</span>\n        </FormControl>\n        <Button\n          type=\"submit\"\n          width=\"200px\"\n          mt={4}\n          borderColor=\"#89d3da\"\n          borderWidth=\"1px\"\n          _hover={{ bg: '#0cc0df', borderColor: 'transparent', color: '#fff' }}\n        >\n          Sign up\n        </Button>\n      </Box>\n    </>\n  );\n};\n","import { RegistrationForm } from '../../components/RegistrationForm/RegistrationForm';\nimport { Box, Container } from '@chakra-ui/react';\n\nexport default function Login() {\n  return (\n    <Box as=\"main\" paddingY=\"50px\" bg=\"#FDF8D7\" h=\"100vh\">\n      <Container as=\"section\">\n        <RegistrationForm />\n      </Container>\n    </Box>\n  );\n}\n"],"names":["schema","yup","name","min","max","required","email","password","RegistrationForm","_errors$name","_errors$email","_errors$password","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","isLogedIn","useSelector","selectIsLoggedIn","_useState","useState","_useState2","_slicedToArray","toggleInput","setToggleInput","_useState3","_useState4","toggleIcon","setToggleIcon","dispatch","useDispatch","toast","useToast","_jsxs","_Fragment","children","_jsx","Navigate","to","replace","Box","as","minWidth","mx","onSubmit","data","signUp","unwrap","catch","error","console","log","position","render","color","p","bg","borderRadius","textAlign","FormControl","isRequired","mb","FormLabel","Input","_objectSpread","type","placeholder","borderColor","borderWidth","autoComplete","message","Button","right","onClick","setInput","setIcon","toggle","Icon","RiEyeOffLine","w","h","RiEyeLine","width","mt","_hover","Login","paddingY","Container"],"sourceRoot":""}