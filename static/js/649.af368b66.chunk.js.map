{"version":3,"file":"static/js/649.af368b66.chunk.js","mappings":"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","sources":["components/RegistrationForm/RegistrationForm.js","pages/Registration/Registration.js","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/container.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Box, FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\n\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Box\n      as=\"form\"\n      width={400}\n      mx=\"auto\"\n      onSubmit={handleSubmit}\n      textAlign=\"center\"\n    >\n      <FormControl isRequired mb=\"16px\">\n        <FormLabel>Username</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          borderColor=\"#89d3da\"\n          borderWidth=\"1px\"\n          bg=\"#fff\"\n          autoComplete=\"name\"\n        />\n      </FormControl>\n      <FormControl isRequired mb=\"16px\">\n        <FormLabel>Email</FormLabel>\n        <Input\n          type=\"email\"\n          name=\"email\"\n          borderColor=\"#89d3da\"\n          borderWidth=\"1px\"\n          bg=\"#fff\"\n          autoComplete=\"email\"\n        />\n      </FormControl>\n      <FormControl isRequired>\n        <FormLabel>Password</FormLabel>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          borderColor=\"#89d3da\"\n          borderWidth=\"1px\"\n          bg=\"#fff\"\n          autoComplete=\"new-password\"\n        />\n      </FormControl>\n      <Button\n        type=\"submit\"\n        width=\"200px\"\n        mt={4}\n        borderColor=\"#89d3da\"\n        borderWidth=\"1px\"\n        _hover={{ bg: '#0cc0df', borderColor: 'transparent', color: '#fff' }}\n      >\n        Sign up\n      </Button>\n    </Box>\n  );\n};\n","import { RegistrationForm } from '../../components/RegistrationForm/RegistrationForm';\nimport { Box, Container } from '@chakra-ui/react';\n\nexport default function Login() {\n  return (\n    <Box as=\"main\" paddingY=\"50px\" bg=\"#F1F1F1\" h=\"100vh\">\n      <Container as=\"section\">\n        <RegistrationForm />\n      </Container>\n    </Box>\n  );\n}\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n"],"names":["RegistrationForm","dispatch","useDispatch","_jsxs","Box","as","width","mx","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","textAlign","children","FormControl","isRequired","mb","_jsx","FormLabel","Input","type","borderColor","borderWidth","bg","autoComplete","Button","mt","_hover","color","Login","paddingY","h","Container","forwardRef","passedProps","ref","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","chakra","label","cx","__css","display","displayName","useFormControlStyles","span","getRequiredIndicatorProps","createContext","errorMessage","_createContext2","FormControlStylesProvider","strict","_createContext4","FormControlProvider","useMultiStyleConfig","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_","div","helperText","useFormControl","disabled","readOnly","required","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size","centerContent","flexDirection","alignItems"],"sourceRoot":""}